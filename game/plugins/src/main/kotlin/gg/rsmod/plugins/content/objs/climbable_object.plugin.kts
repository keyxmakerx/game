package gg.rsmod.plugins.content.objs

private val CLIMB_UP_ANIMATION = 828

private val CLIMB_DOWN_ANIMATION = 827

private val climbableFields = listOf("Climb", "Climb-up", "Climb-down")

val ids = arrayOf(
    11,
    45,
    46,
    54,
    55,
    56,
    57,
    96,
    101,
    133,
    164,
    195,
    245,
    246,
    272,
    273,
    287,
    492,
    527,
    528,
    882,
    1570,
    1722,
    1723,
    1725,
    1728,
    1729,
    1733,
    1737,
    1738,
    1739,
    1740,
    1742,
    1743,
    1744,
    1746,
    1747,
    1748,
    1749,
    1750,
    1751,
    1752,
    1754,
    1755,
    1756,
    1757,
    1759,
    1764,
    1765,
    1767,
    2020,
    2113,
    2147,
    2174,
    2175,
    2231,
    2236,
    2257,
    2268,
    2269,
    2298,
    2299,
    2314,
    2315,
    2316,
    2317,
    2318,
    2328,
    2347,
    2348,
    2352,
    2353,
    2405,
    2408,
    2447,
    2448,
    2511,
    2512,
    2533,
    2535,
    2536,
    2542,
    2544,
    2585,
    2590,
    2591,
    2592,
    2605,
    2638,
    2641,
    2711,
    2796,
    2797,
    2812,
    2823,
    2833,
    2853,
    2884,
    2935,
    2958,
    3028,
    3029,
    3030,
    3031,
    3205,
    3265,
    3307,
    3365,
    3415,
    3416,
    3610,
    3618,
    3722,
    3723,
    3748,
    3788,
    3789,
    3803,
    3828,
    3829,
    3832,
    3927,
    4004,
    4005,
    4158,
    4159,
    4160,
    4161,
    4163,
    4164,
    4173,
    4188,
    4383,
    4412,
    4413,
    4415,
    4471,
    4472,
    4485,
    4493,
    4494,
    4495,
    4496,
    4568,
    4569,
    4570,
    4620,
    4622,
    4624,
    4625,
    4626,
    4627,
    4643,
    4644,
    4645,
    4646,
    4728,
    4743,
    4744,
    4755,
    4756,
    4772,
    4773,
    4774,
    4775,
    4776,
    4777,
    4778,
    4779,
    4780,
    4781,
    4880,
    4881,
    4889,
    4965,
    4966,
    4967,
    4968,
    4969,
    4970,
    5005,
    5054,
    5130,
    5132,
    5136,
    5206,
    5207,
    5250,
    5251,
    5262,
    5263,
    5264,
    5265,
    5266,
    5268,
    5281,
    5415,
    5416,
    5491,
    5493,
    5848,
    5884,
    5886,
    5903,
    5946,
    5947,
    6085,
    6086,
    6087,
    6088,
    6089,
    6090,
    6092,
    6226,
    6242,
    6243,
    6244,
    6245,
    6260,
    6261,
    6280,
    6281,
    6372,
    6419,
    6435,
    6436,
    6439,
    6450,
    6497,
    6498,
    6499,
    6500,
    6501,
    6502,
    6503,
    6504,
    6561,
    6645,
    6672,
    6673,
    6686,
    6702,
    6703,
    6704,
    6705,
    6706,
    6707,
    6708,
    6751,
    6752,
    6753,
    6754,
    6755,
    6841,
    6842,
    7056,
    7057,
    7221,
    7239,
    7240,
    7433,
    7435,
    8744,
    8745,
    8746,
    8785,
    8956,
    8966,
    9084,
    9138,
    9141,
    9296,
    9297,
    9303,
    9304,
    9305,
    9306,
    9316,
    9317,
    9319,
    9320,
    9327,
    9331,
    9332,
    9335,
    9336,
    9363,
    9470,
    9471,
    9472,
    9558,
    9559,
    9582,
    9584,
    9744,
    9745,
    9978,
    9979,
    10015,
    10016,
    10017,
    10018,
    10033,
    10036,
    10038,
    10136,
    10137,
    10167,
    10168,
    10177,
    10193,
    10194,
    10195,
    10196,
    10197,
    10198,
    10199,
    10200,
    10201,
    10202,
    10203,
    10204,
    10205,
    10206,
    10207,
    10208,
    10209,
    10210,
    10211,
    10212,
    10213,
    10214,
    10215,
    10216,
    10217,
    10218,
    10219,
    10220,
    10221,
    10222,
    10223,
    10224,
    10225,
    10226,
    10227,
    10228,
    10229,
    10230,
    10287,
    10288,
    10308,
    10319,
    10321,
    10322,
    10323,
    10416,
    10434,
    10482,
    10484,
    10493,
    10494,
    10525,
    10526,
    10554,
    10557,
    10559,
    10560,
    10570,
    10597,
    10698,
    10699,
    10707,
    10708,
    10771,
    10772,
    10773,
    10774,
    10775,
    10776,
    10804,
    10851,
    10857,
    10858,
    10950,
    11041,
    11042,
    11043,
    11044,
    11050,
    11198,
    11199,
    11200,
    11201,
    11244,
    11289,
    11290,
    11308,
    11309,
    11310,
    11417,
    11493,
    11511,
    11724,
    11725,
    11727,
    11728,
    11729,
    11731,
    11732,
    11733,
    11734,
    11735,
    11736,
    11737,
    11739,
    11740,
    11741,
    11742,
    11888,
    11889,
    11890,
    12112,
    12113,
    12230,
    12254,
    12255,
    12265,
    12390,
    12391,
    12475,
    12536,
    12537,
    12538,
    12570,
    12576,
    12601,
    12616,
    12618,
    12622,
    12745,
    12764,
    12779,
    12780,
    12781,
    12906,
    12907,
    13328,
    13329,
    13330,
    13497,
    13498,
    13499,
    13500,
    13501,
    13502,
    13503,
    13505,
    13964,
    13966,
    13983,
    13985,
    13987,
    13989,
    13991,
    13999,
    14000,
    14012,
    14014,
    14016,
    14296,
    14314,
    14735,
    14745,
    14746,
    14747,
    14758,
    15115,
    15116,
    15191,
    15202,
    15638,
    15746,
    15747,
    15756,
    15790,
    15791,
    15896,
    15898,
    15899,
    15901,
    16048,
    16049,
    16078,
    16079,
    16080,
    16081,
    16112,
    16113,
    16114,
    16115,
    16146,
    16147,
    16148,
    16149,
    16154,
    16174,
    16369,
    16371,
    16450,
    16535,
    16536,
    16556,
    16640,
    16732,
    16733,
    16734,
    16735,
    16736,
    16945,
    16946,
    16947,
    16948,
    16959,
    16960,
    16961,
    16962,
    17122,
    17143,
    17148,
    17149,
    17155,
    17159,
    17160,
    17959,
    17960,
    17974,
    17975,
    17976,
    17977,
    17978,
    17979,
    17985,
    17986,
    17999,
    18000,
    18001,
    18002,
    18034,
    18036,
    18049,
    18050,
    18069,
    18086,
    18087,
    18095,
    18096,
    18105,
    18106,
    18107,
    18108,
    18230,
    18231,
    18233,
    18266,
    18322,
    18324,
    18325,
    18427,
    18596,
    18597,
    18598,
    18599,
    18610,
    18611,
    18833,
    18834,
    18843,
    18871,
    18903,
    18904,
    18923,
    18924,
    18982,
    19040,
    19110,
    19846,
    19847,
    19849,
    19966,
    20056,
    20193,
    20194,
    20226,
    20227,
    20275,
    20277,
    20278,
    20280,
    20281,
    20283,
    20284,
    20285,
    20286,
    20287,
    20340,
    20353,
    20354,
    20356,
    20357,
    20619,
    20631,
    20652,
    20653,
    20655,
    20659,
    20684,
    20711,
    20717,
    20724,
    20725,
    20987,
    21035,
    21095,
    21120,
    21395,
    21396,
    21455,
    21511,
    21512,
    21513,
    21514,
    21515,
    21578,
    21592,
    21871,
    21872,
    21922,
    22121,
    22122,
    22164,
    22172,
    22173,
    22247,
    22248,
    22250,
    22252,
    22253,
    22254,
    22274,
    22275,
    22354,
    22367,
    22368,
    22369,
    22370,
    22371,
    22372,
    22432,
    22433,
    22434,
    22600,
    22608,
    22609,
    22650,
    22651,
    22666,
    22667,
    22931,
    22932,
    22933,
    22934,
    22935,
    22936,
    22937,
    22938,
    22939,
    22940,
    22941,
    22942,
    23073,
    23074,
    23279,
    23376,
    23377,
    23504,
    23531,
    23532,
    23584,
    23585,
    23610,
    24073,
    24074,
    24075,
    24264,
    24349,
    24350,
    24352,
    24353,
    24354,
    24355,
    24356,
    24357,
    24358,
    24359,
    24360,
    24361,
    24362,
    24363,
    24364,
    24365,
    24366,
    24367,
    24687,
    24717,
    24718,
    24723,
    24733,
    24771,
    24772,
    24795,
    24796,
    24819,
    24918,
    24919,
    24925,
    24926,
    25038,
    25045,
    25213,
    25336,
    25337,
    25338,
    25339,
    25340,
    25431,
    25432,
    25434,
    25437,
    25604,
    25606,
    25629,
    25630,
    25662,
    25663,
    25682,
    25683,
    25786,
    25787,
    25801,
    25843,
    25844,
    25935,
    25938,
    25939,
    25940,
    25941,
    26017,
    26106,
    26107,
    26118,
    26119,
    26144,
    26145,
    26146,
    26147,
    26148,
    26149,
    26150,
    26151,
    26197,
    26199,
    26208,
    26293,
    26295,
    26297,
    26299,
    26323,
    26324,
    26327,
    26328,
    26341,
    26345,
    26518,
    26519,
    26806,
    26849,
    26850,
    26934,
    26982,
    26983,
    27126,
    27128,
    27129,
    27130,
    27151,
    27152,
    27242,
    27243,
    27543,
    27668,
    27669,
    27866,
    27870,
    28386,
    28388,
    28512,
    28515,
    28516,
    28572,
    28652,
    28653,
    28676,
    28714,
    28737,
    28740,
    28742,
    28743,
    28782,
    29355,
    29358,
    29385,
    29386,
    29387,
    29391,
    29392,
    29589,
    29592,
    29655,
    29656,
    29659,
    29660,
    29663,
    29664,
    29667,
    29668,
    29671,
    29672,
    29729,
    30061,
    30063,
    30489,
    30494,
    30495,
    30533,
    30534,
    30572,
    30574,
    30575,
    30722,
    30723,
    30724,
    30725,
    30732,
    30733,
    30863,
    30942,
    30943,
    30944,
    31002,
    31010,
    31316,
    31359,
    31412,
    31417,
    31529,
    31530,
    31562,
    31563,
    31564,
    31615,
    31616,
    32015,
    32016,
    32024,
    32048,
    32270,
    32271,
    33184,
    33232,
    33246,
    33977,
    34040,
    34041,
    34080,
    34216,
    34217,
    34285,
    34286,
    34287,
    34388,
    34390,
    34394,
    34396,
    34397,
    34398,
    34498,
    34499,
    34548,
    34550,
    34567,
    34568,
    34785,
    34788,
    34829,
    34869,
    34871,
    34872,
    34873,
    34874,
    34875,
    34876,
    34877,
    34878,
    34889,
    34904,
    34978,
    34995,
    35099,
    35121,
    35125,
    35391,
    35516,
    35518,
    35533,
    35534,
    35645,
    35646,
    35672,
    35673,
    35781,
    35782,
    35783,
    35970,
    36002,
    36306,
    36312,
    36347,
    36348,
    36349,
    36363,
    36365,
    36402,
    36403,
    36440,
    36441,
    36476,
    36479,
    36480,
    36481,
    36484,
    36495,
    36500,
    36521,
    36523,
    36532,
    36540,
    36644,
    36645,
    36646,
    36687,
    36691,
    36693,
    36694,
    36703,
    36707,
    36708,
    36709,
    36710,
    36768,
    36769,
    36770,
    36771,
    36772,
    36773,
    36774,
    36775,
    36776,
    36777,
    36778,
    36791,
    36792,
    36793,
    36794,
    36795,
    36796,
    36797,
    36945,
    36960,
    36961,
    36962,
    36963,
    36964,
    36965,
    36968,
    36969,
    36984,
    36985,
    36986,
    36987,
    36988,
    36989,
    36990,
    36991,
    37023,
    37088,
    37116,
    37117,
    37211,
    37212,
    37268,
    37454,
    37493,
    37494,
    37495,
    37496,
    37497,
    37498,
    37502,
    37503,
    37624,
    37625,
    37683,
    37684,
    37900,
    38012,
    38221,
    38222,
    38469,
    38471,
    38481,
    38486,
    38549,
    38761,
    38762,
    38854,
    38855,
    38856,
    39191,
    39206,
    39273,
    39275,
    39329,
    39331,
    39345,
    39346,
    39468,
    39611,
    39612,
    39613,
    40026,
    40027,
    40057,
    40059,
    40113,
    40114,
    40261,
    40262,
    40359,
    40360,
    40892,
    40900,
    40901,
    40932,
    40933,
    40956,
    40957,
    40995,
    40996,
    41007,
    41065,
    41068,
    41078,
    41079,
    41121,
    41122,
    41165,
    41281,
    41282,
    41383,
    41425,
    41435,
    41436,
    41458,
    41684,
    42493,
    43182,
    43183,
    43184,
    43185,
    43528,
    43597,
    43790,
    43885,
    43897,
    43898,
    43899,
    43901,
    44207,
    44208,
    44247,
    44253,
    44254,
    44255,
    45005,
    45006,
    45007,
    45077,
    45078,
    45481,
    45482,
    45483,
    45484,
    45784,
    46499,
    46731,
    46936,
    46938,
    46939,
    46946,
    47139,
    47140,
    47141,
    47142,
    47143,
    47162,
    47163,
    47204,
    47205,
    47239,
    47245,
    47259,
    47260,
    47361,
    47364,
    47574,
    47575,
    47657,
    47776,
    47927,
    47928,
    47929,
    47930,
    47980,
    48496,
    48611,
    48612,
    48677,
    48678,
    48679,
    48680,
    48683,
    48688,
    48797,
    48798,
    49031,
    49032,
    49089,
    50567,
    50568,
    50604,
    51127,
    51128,
    51156,
    51685,
    51704,
    52219,
    52220,
    52284,
    52308,
    52546,
    52547,
    52769,
    52806,
    52833,
    52834,
    53280,
    53694,
    54675,
    55318,
    55402,
    55403,
    55404,
    55450,
    56149,
    56805,
    56885,
    57256,
    57260,
    57315,
    57316,
    57464,
    57465,
    57466,
    57467,
    57468,
    57469,
    57777,
    57778,
    57876,
    57877,
    57895,
    57897,
    57899,
    57901,
    57903,
    57904,
    57905,
    57907,
    57909,
    57961,
    57962,
    58005,
    58007,
    58149,
    58151,
    58201,
    58203,
    61091,
    61197,
    61198,
    61293,
    61493,
    61525,
    61551
)


/*for (id in 0..world.definitions.getCount(ObjectDef::class.java)) {
    for (field in climbableFields) {
        on_obj_option(id, field) { ->
            val gameObject = player.getInteractingGameObj()
            val optionIndex = player.getInteractingOption()

            player.queue(TaskPriority.STRONG) {
                val objectDef = world.definitions.get(ObjectDef::class.java, id)
                val options = objectDef.options

                val option = options[optionIndex]

                if (option != null) {
                    println("object=$gameObject")
                    climbLadder(this, gameObject, option)
                } else {
                    println("unable to find option for object: $gameObject")
                }

            }
        }
    }
}*/

/**
 * The base function for climbing
 */
fun climb(player: Player, animation: Int?, destination: Tile, vararg messages: String) {
    player.queue {
        player.lock = LockState.DELAY_ACTIONS
        player.animate(animation!!)
        this.wait(2)
        player.moveTo(destination)
        messages.forEach(player::message)
    }
}

/**
 * Handles the climbing of a ladder.
 *
 * @param player
 * The player.
 * @param object
 * The game object.
 * @param option
 * The option.
 */
fun climbLadder(it: QueueTask, `object`: GameObject, option: String) {
    val player = it.player
    var newLadder: GameObject? = null
    var animation: Int? = CLIMB_UP_ANIMATION
    val objectDef = world.definitions.get(ObjectDef::class.java, `object`.id)

    if (option.equals("climb-up", ignoreCase = true)) {
        newLadder = getTargetObject(it, `object`, false)
    } else if (option.equals("climb-down", ignoreCase = true)) {
        if (objectDef.name.equals("Trapdoor")) {
            animation = CLIMB_DOWN_ANIMATION
        }
        newLadder = getTargetObject(it, `object`, true)
    } else if (option.equals("climb", ignoreCase = true)) {
        val upperLadder = getTargetObject(it, `object`, false)
        val downLadder = getTargetObject(it, `object`, true)
        if (upperLadder == null && downLadder != null) {
            climbLadder(it, `object`, "climb-down")
            return
        }
        if (upperLadder != null && downLadder == null) {
            climbLadder(it, `object`, "climb-up")
            return
        }
        // TODO: dialogue for climbing up stairs
        // player.getDialogueManager().startDialogue(ClimbDialogue::class.java, `object`)
        return
    }
    val destination: Tile? = if (newLadder != null) getDestination(newLadder) else null
    if (newLadder == null || destination == null) {
        player.message("The ladder doesn't seem to lead to anywhere.")
        return
    }
    if (objectDef.name.startsWith("Stair")) {
        animation = null
    }
    climb(player, animation, destination)
}

fun getTargetObject(it: QueueTask, source: GameObject, down: Boolean): GameObject? {
    val p = it.player
    val world = p.world

    // the modification to apply on height in order to find the target object
    val mod = if (down) -1 else 1

    // the destination object we're looking to find
    var gameObject: GameObject? =
        world.getObject(p.tile.transform(0, if (mod == -1) mod * -6400 else 0, if (mod == -1) 0 else mod), source.type)

    val sourceDef = world.definitions.get(ObjectDef::class.java, source.id)
    val destinationDef = world.definitions.get(ObjectDef::class.java, gameObject?.id ?: -1)

    if (gameObject == null || !isLadder(destinationDef)) {
        if (gameObject != null && destinationDef.name == sourceDef.name) {
            gameObject = world.getObject(gameObject.tile.transform(0, 0, mod), source.type)
            if (gameObject != null) {
                return gameObject
            }
        }
        gameObject = findLadder(it, source.tile.transform(0, 0, mod), source.type)
        if (gameObject == null) {
            gameObject = world.getObject(source.tile.transform(0, mod * -6400, 0), source.type)
            if (gameObject == null) {
                gameObject = findLadder(it, source.tile.transform(0, mod * -6400, 0), source.type)
            }
        }
    }
    return gameObject
}

/**
 * Checks if the object is a ladder.
 *
 * @param def
 * The object's definitions.
 * @return `True` if so.
 */
fun isLadder(def: ObjectDef): Boolean {
    for (option in def.options) {
        if (option != null && option.contains("Climb")) {
            return true
        }
    }
    return def.name == "Trapdoor"
}

/**
 * Finds a ladder (by searching a 10x10 area around the given location).
 *
 * @param l
 * The location.
 * @return The ladder.
 */
fun findLadder(it: QueueTask, l: Tile, type: Int): GameObject? {
    val world = it.player.world
    for (x in -5..5) {
        for (y in -5..5) {
            val transform: Tile = l.transform(x, y, 0)
            val gameObject = world.getObject(transform, type)
            val objectDef = world.definitions.get(ObjectDef::class.java, gameObject?.id ?: -1)
            if (gameObject != null && isLadder(objectDef)) {
                return gameObject
            }
        }
    }
    return null
}

fun getDestination(`object`: GameObject): Tile? {/*    var sizeX: Int = `object`.getDefinitions().getSizeX()
        var sizeY: Int = `object`.getDefinitions().getSizeY()
        if (`object`.getRotation() % 2 !== 0) {
            val switcher = sizeX
            sizeX = sizeY
            sizeY = switcher
        }
        val dir: Direction = forWalkFlag(`object`.getDefinitions().getAccessBlockFlag(), `object`.getRotation())
        if (dir != null) {
            return getDestination(`object`, sizeX, sizeY, dir, 0)
        }
        when (`object`.getRotation()) {
            0 -> return getDestination(`object`, sizeX, sizeY, Direction.SOUTH, 0)
            1 -> return getDestination(`object`, sizeX, sizeY, Direction.EAST, 0)
            2 -> return getDestination(`object`, sizeX, sizeY, Direction.NORTH, 0)
            3 -> return getDestination(`object`, sizeX, sizeY, Direction.WEST, 0)
        }*/
    return null
}


/**
 * Gets the direction for the given walking flag.
 *
 * @param walkingFlag
 * The walking flag.
 * @param rotation
 * The rotation.
 * @return The direction, or null if the walk flag was 0.
 */
fun forWalkFlag(walkingFlag: Int, rotation: Int): Direction? {
    var walkingFlag = walkingFlag
    if (rotation != 0) {
        walkingFlag = (walkingFlag shl rotation and 0xf) + (walkingFlag shr 4 - rotation)
    }
    if (walkingFlag > 0) {
        if (walkingFlag and 0x8 == 0) {
            return Direction.WEST
        }
        if (walkingFlag and 0x2 == 0) {
            return Direction.EAST
        }
        if (walkingFlag and 0x4 == 0) {
            return Direction.SOUTH
        }
        if (walkingFlag and 0x1 == 0) {
            return Direction.NORTH
        }
    }
    return null
}


/*

        dumping code

        val climbableFields = listOf("Climb", "Climb-up", "Climb-down")

        val bldr = StringBuilder()

        for (id in 0..world.definitions.getCount(ObjectDef::class.java)) {
            val objectDef = world.definitions.getNullable(ObjectDef::class.java, id) ?: continue

            val contains = climbableFields.any { objectDef.options.contains(it) }

            if (contains) {
                bldr.append("$id, ")
            }
        }

        println("val ids = ${bldr.toString()}")
 */